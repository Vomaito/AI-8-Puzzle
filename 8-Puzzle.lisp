(LOAD common.lsp)
(SETQ
  INICIAL '(0 1 2 4 7 3 8 5 6)
  SOLUCION '(1 2 3 4 5 6 7 8 0)
  IDNODO 0
  OPENSTACK NIL
  CLOSEDSTACK NIL
  MOVSOL NIL
)


(DEFUN ISVALID()
	(SETQ NUMMOV 0)
	(DOTIMES (I 9)
		(SETQ ST (NTH I INICIAL))
		(((NEQ ST 0)
			(DOTIMES (J (- 8 I))
				(SETQ ND (NTH (+ J I 1) INICIAL))
				(((NEQ ND 0)
					((> ST ND) (INCQ NUMMOV))
				))
			)
		))
	)
	((= 0 (MOD NUMMOV 2)) T)
	NIL
)
(DEFUN ELEMENT_AT(INDEX LST)
  (NTH INDEX LST)
)
(DEFUN HEURISTICA(NODO)
  (SETQ DIST 0)
  (SETQ DISTSUM 0)
  (SETQ INDEX 0)
  (LOOP
    ((= 9 INDEX)
    DIST
    )
    (((NEQ (ELEMENT_AT INDEX NODO) 0)
      (SETQ
        INIX (MOD (ELEMENT_AT INDEX NODO) 3)
        INIY (INTEGERDIV (ELEMENT_AT INDEX NODO) 3)
        FINX (MOD (ELEMENT_AT INDEX SOLUCION) 3)
        FINY (INTEGERDIV (ELEMENT_AT INDEX SOLUCION) 3)
        )
        (SETQ
          DIST (+ DIST (ABS(- INIX FINX)) (ABS(- INIY FINY)))
        )
    ))
      (INCQ INDEX)
  )
  DIST
)
(DEFUN INTEGERDIV (X Y)
  (SETQ
    AUXD X
    COUNT 0
  )
  (LOOP
    ((< AUXD Y)
      COUNT
    )
    (INCQ COUNT)
    (SETQ AUXD (- AUXD Y))
  )
)
(DEFUN GETINDEX (NODO ELEMENTO)
  (SETQ INDEX 0)
  (LOOP
    ((= INDEX 9) NIL)
    ((= (NTH INDEX NODO) ELEMENTO)
      INDEX
    )
    (INCQ INDEX)
  )
)
(DEFUN VALIDMOVE(NODO MOVE)
  ((EQUAL MOVE 'U)
    (SETQ INDEX (GETINDEX NODO 0))
    ((< INDEX 3)
      NIL
    )
    T
  )
  ((EQUAL MOVE 'D)
    (SETQ INDEX (GETINDEX NODO 0))
    ((> INDEX 5)
      NIL
    )
    T
  )
  ((EQUAL MOVE 'L)
    (SETQ INDEX (GETINDEX NODO 0)
      INIX (MOD INDEX 3)
    )
    ((= INIX 0)
      NIL
    )
    T
  )
  ((EQUAL MOVE 'R)
    (SETQ INDEX (GETINDEX NODO 0)
      INIX (MOD INDEX 3)
    )
    ((= INIX 2)
      NIL
    )
    T
  )
)
(DEFUN SWAP(X Y NODE)
  (SETQ NEWLIST (COPY-ALIST NODE))
  (SETQ AUX (NTH Y NEWLIST))
  (SETF (NTH Y NEWLIST) (NTH X NEWLIST))
  (SETF (NTH X NEWLIST) AUX)
  NEWLIST
)
(DEFUN MAKEMOVE(NODO MOVE)
  ((VALIDMOVE NODO MOVE)
    (SETQ INDEXZERO (GETINDEX NODO 0))
    ((EQUAL MOVE 'U)
      (SWAP INDEXZERO (- INDEXZERO 3) NODO)
    )
    ((EQUAL MOVE 'D)
      (SWAP INDEXZERO (+ INDEXZERO 3) NODO)
    )
    ((EQUAL MOVE 'L)
      (SWAP INDEXZERO (- INDEXZERO 1) NODO)
    )
    ((EQUAL MOVE 'R)
      (SWAP INDEXZERO (+ INDEXZERO 1) NODO)
    )
  )
)
(DEFUN ORDER2OPEN (LST)
  (SORT LST
    (LAMBDA (X Y)
      (< (+ (SECOND X) (THIRD X)) (+ (SECOND Y) (THIRD Y))))
      )
; SE USA NODO NIVEL MANHATTAN MOVE
(DEFUN EXPANDIR(OPTION)
  (SETQ
    UP (MAKEMOVE (FIRST OPTION) 'U)
    DOWN (MAKEMOVE(FIRST OPTION) 'D)
    LEFT (MAKEMOVE(FIRST OPTION) 'L)
    RIGHT (MAKEMOVE(FIRST OPTION) 'R)
    LSTNEXT NIL
    )
  (((NEQ UP NIL)
      (PUSH (LIST UP (+ 1 (SECOND OPTION)) (HEURISTICA UP) 'U (SIXTH OPTION) (INCQ IDNODO)) LSTNEXT )
  ))
  (((NEQ DOWN NIL)
      (PUSH (LIST DOWN (+ 1 (SECOND OPTION)) (HEURISTICA DOWN) 'D (SIXTH OPTION) (INCQ IDNODO)) LSTNEXT )
  ))
  (((NEQ RIGHT NIL)
      (PUSH (LIST RIGHT (+ 1 (SECOND OPTION)) (HEURISTICA RIGHT) 'R (SIXTH OPTION) (INCQ IDNODO)) LSTNEXT )
  ))
  (((NEQ LEFT NIL)
      (PUSH (LIST LEFT (+ 1 (SECOND OPTION)) (HEURISTICA LEFT) 'L (SIXTH OPTION) (INCQ IDNODO)) LSTNEXT )
  ))
  LSTNEXT
)
(DEFUN PRINT_PUZZLE (NODO)
  (SETQ INDEX 0)
  (LOOP
	((= INDEX 9))
      (((= 2 (MOD INDEX 3))
        (PRIN1(NTH INDEX NODO))
        (TERPRI)
      ))
      (((NEQ 2 (MOD INDEX 3))
          (PRIN1(NTH INDEX NODO))
      ))
      (INCQ INDEX)
  )
)
(DEFUN ADDOPEN (OPTION)
  (SETQ
    INDEX 0
    COST (+ (SECOND OPTION) (THIRD OPTION))
  )
  (LOOP
    (SET NODO (NTH INDEX OPENSTACK))
    (((NEQ NODO NIL)
      ((< COST (+ (SECOND NODO) (THIRD NODO)) )
        (SETQ
          OPENSTACK (APPEND (FIRSTN INDEX OPENSTACK) (LIST OPTION) (NTHCDR INDEX OPENSTACK))
        )
      )
    ))
    (INCQ INDEX)
    ((NULL NODO)
      (SETQ OPENSTACK (APPEND OPENSTACK (LIST OPTION)))
    )
  )
)

(DEFUN ADDCLOSE (OPTION)
  (PUSH NODE CLOSEDSTACK)
)

(DEFUN ISINCLOSEDSTACK (NODO)
  (SETQ INDEX 0)
  (LOOP
    ((NULL CAR(NTH INDEX CLOSEDSTACK)) T)
    ((EQUAL NODO (CAR(NTH INDEX CLOSEDSTACK)))
      (((< (+ (SECOND NODO) (THIRD NODO)) (+ (SECOND (CAR(NTH INDEX CLOSEDSTACK))) (THIRD (CAR(NTH INDEX CLOSEDSTACK))) ) )
        (setf (SECOND (NTH INDEX CLOSEDSTACK)) (SECOND NODO))
        (setf (THIRD (NTH INDEX CLOSEDSTACK)) (THIRD NODO))
        (setf (FIFTH (NTH INDEX CLOSEDSTACK)) (FIFTH NODO))
      ))
      NIL
    )
  (INCQ INDEX)
  )
)
(DEFUN BACKTRACK (NODO)
  (SETQ
    IDFATHER (FIFTH NODO)
    INDEX 0
    BUSQOPTION (CAR CLOSEDSTACK)
  )
  (PUSH (FOURTH NODO) MOVSOL)
  (LOOP
    ((NULL BUSQOPTION)
    (PRINT 'ERROR))
    ((= 0 (SECOND BUSQOPTION))
    (PRINT 'RESUELTO)
    )
    (((= IDFATHER (SIXTH BUSQOPTION))
      (SETQ
        IDFATHER (FIFTH BUSQOPTION)
      )
      (PUSH (FOURTH BUSQOPTION) MOVSOL)
    ))
    (INCQ INDEX)
    (SETQ BUSQOPTION (NTH INDEX CLOSEDSTACK))
  )
)

(DEFUN PATH()
  (SETQ COST (HEURISTICA INICIAL))
  (SETQ OPTION (LIST INICIAL 0 COST NIL 0 (INCQ IDNODO)))
  (LOOP
    (SETQ CURRENT (POP OPENSTACK))
    ((EQUAL (CAR CURRENT) SOLUCION)
      (BACKTRACK NODO)
      (PRINT_PUZZLE MOVSOL)
    )
    (SETQ ADJACENT (EXPANDIR CURRENT))
    (SETQ I 0)
    (LOOP
      (SETQ X (NTH I ADJACENT))
      (((NOT (ISINCLOSEDSTACK X))
        (ADDOPEN X)
      ))
      (INCQ I)
    )
    (ADDCLOSE CURRENT)
  )
)
(PATH)
